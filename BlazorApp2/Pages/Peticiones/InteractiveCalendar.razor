<h3>InteractiveCalendar</h3>

  <div class="col-lg-6 col-xl-4 p-3">
                <RadzenCard>
                    <h4 class="mb-4">DatePicker with special dates</h4>
                    <RadzenDatePicker  TValue="DateTime?" DateRender=@DateRenderSpecial  Change="@OnChange" Class="w-100" />
                </RadzenCard>
            </div>


@code{
    IEnumerable<DateTime> SelectedDates = new List<DateTime>() ;
    [Inject]
    protected AuthenticationStateProvider _authenticationStateProvider { get; set; }
    [Inject]
    protected API _api { get; set; }
    [Inject]
    protected SharePointAPI _SharePointApi { get; set; }

    protected override async Task OnParametersSetAsync() {
        await LoadData();

    }


    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (SelectedDates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    protected async Task LoadData() {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = authState.User.Identity.Name;
        UsuarioResponse InfoUsuario = await _api.GetUsuarioByCorreoEmpresaAsync(userIdentity);
        HashSet<CalendarioVacacionesResponse> resultado =new();

        IEnumerable<CalendarioVacacionesResponse> diasAplicacion= await _api.GetUsuarioCalendarioVacacionesAsync(InfoUsuario.IdTecnico);
       diasAplicacion.ToList().ForEach(X=> resultado.Add(X));
        

        var resultadoSharePoint= await _SharePointApi.GetHolidaysUserTillNowAsync(InfoUsuario.EmailCorporativo,new DateTime(DateTime.Now.Year-10,DateTime.Now.Month,DateTime.Now.Day));

        resultadoSharePoint.ToList().ForEach(X => {
            var nuevosDias = ObtenerDias(X.FechaInicio.Date, X.FechaFin.Date, InfoUsuario.IdTecnico, X.EstadoDia);
            nuevosDias.ToList().ForEach(X=> resultado.Add(X));
        });

        await  _api.AddCalendarioVacacionesNoSavedAsync(resultado);
        this.SelectedDates = resultado.Select(x => x.FechaCalendario.Date).ToList();
    }
    public void OnChange(DateTime? d) {



    }
    public  IEnumerable<CalendarioVacacionesResponse> ObtenerDias(DateTime inicio, DateTime final, int idUsuario,int tipoDia) {
        List<CalendarioVacacionesResponse> results = new();
        CalendarioVacacionesResponse calendario;
        while (inicio < final) {
            calendario = new() { FechaCalendario = inicio, IdTecnico = idUsuario, TipoDiaCalendario = tipoDia };
            results.Add(calendario);
            inicio = inicio.AddDays(1);
        }
        return results;
    }


}