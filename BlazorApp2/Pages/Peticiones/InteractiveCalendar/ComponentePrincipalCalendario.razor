@inject API _api;

@*Botones de seleccion*@
<RadzenBadge BadgeStyle="BadgeStyle.Secondary" IsPill="true" Text="Selección Tipo Dia" />
<RadzenCard Style="border:none;background-color:azure">

    <HeadCalendario/>
    <PieCalendario CancelarCambiosButtonListener=calendario.CancelarCambiosButtonListener SaveCalendarButtonListener=calendario.SaveCalendarButtonListener/>
    <br />
    <br />
    <RadzenRadioButtonList @bind-Value=@valor TValue="string" @ref="radiobutton" >
        <Items>
            @foreach (var dataItem in data) {
                <RadzenRadioButtonListItem Style=@($"background-color:{dataItem.ColorRepresentacion}") Text="@dataItem.Descripcion" Value="@dataItem.Descripcion"  />
            }
        </Items>
    </RadzenRadioButtonList>
    <br />
   <p> Multiseleccion</p> 
   <RadzenSwitch @bind-Value=@Multiseleccion  />

     <CascadingValue Value="@Multiseleccion" Name="Multiseleccion">
        <CascadingValue Value="@valor" Name="EstadoDiaSeleccion">
            <InteractiveCalendar @ref="calendario"/>
        </CascadingValue>
    </CascadingValue>
</RadzenCard>



@code{
    public IEnumerable<TipoDiaCalendarioResponse> data { get; set; } = new List<TipoDiaCalendarioResponse>();
    protected override async Task OnInitializedAsync() {
        data = await _api.GetAllTipoDiaCalendarioAsync();
        this.valor = data.First().Descripcion;
        this.radiobutton.Value = valor;
        StateHasChanged();
    }

    RadzenRadioButtonList<string> radiobutton;

    public string valor;

    public bool Multiseleccion { get; set; }
    InteractiveCalendar calendario=new();

}
