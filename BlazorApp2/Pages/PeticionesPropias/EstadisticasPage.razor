@page "/PeticionesPropias/Estadisticas"

@inject API _api;
@inject AuthenticationStateProvider _authenticationStateprovider;
@inject TooltipService tooltipService

@using System.Globalization



<div class="container">
        
    @if (this.datos != null) {
        
        <RadzenCard Class="mt-4 w-100 mb-4 d-flex align-items-center" >
            
            <RadzenLabel Text="Cambiar Coloración:" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Data="@colorSchemes" @bind-Value="@colorScheme" />
            
            <RadzenDropDown Data=@this.datos.GroupBy(X=> X.FechaCalendario.Year).Select(X=> X.Key).OrderBy(X=>X) @bind-Value="@YearSeleccionado" />            
        </RadzenCard>
        <br />

        <RadzenCard>
                 <BlazorApp2.Shared.Components.EstadisticasVacacionesAprobadas.EstadisticasPeticionesAprobadas
                 calendarios=@datos.Where(X=>this.EstadosDias.First(y=> y.Id ==X.Estado).Descripcion=="Aprobado").ToList() colorScheme=colorScheme EstadosDias=EstadosDias TiposDias=TiposDias usuario=usuario YearSeleccionado=this.YearSeleccionado/>
       
        
        <br />
       
            <BlazorApp2.Shared.Components.EstadisticasPorMes.EstadisticasPorMes YearSeleccionado=YearSeleccionado
               calendarios =@datos.Where(X=>X.FechaCalendario.Year==this.YearSeleccionado).ToList() 
               EstadosDias=EstadosDias TiposDias=TiposDias colorScheme=colorScheme EstadoDeseado="Aprobado" />
        </RadzenCard>
        <br />
        <br />

        <RadzenCard>
               <BlazorApp2.Shared.Components.EstadisticasPorEstadoVacaciones.EstadisticasPorEstadoVacaciones YearSeleccionado=YearSeleccionado
               calendarios =@datos.Where(X=>X.FechaCalendario.Year==this.YearSeleccionado).ToList() EstadosDias=EstadosDias TiposDias=TiposDias colorScheme=colorScheme />
        
             

        </RadzenCard>
           
    }
    


</div>








@code{
    IEnumerable<ColorScheme> colorSchemes = Enum.GetValues(typeof(ColorScheme)).Cast<ColorScheme>();
    public int YearSeleccionado= DateTime.Now.Year;
    public ColorScheme colorScheme  = ColorScheme.Pastel;

    public ICollection<CalendarioVacacionesResponse> datos;


    public ICollection<TipoDiaCalendarioResponse> TiposDias;
    public ICollection<EstadoCalendarioVacacionesResponse> EstadosDias;
    public UsuarioResponse usuario;


    protected override async Task OnInitializedAsync() {
        this.usuario=  _authenticationStateprovider.GetCurrentUser(_api);
        this.EstadosDias = await _api.GetAllEstadoCalendarioVacacionesAsync();
        this.TiposDias = await _api.GetAllTipoDiaCalendarioAsync();
        var datosRecibidos = await _api.GetUsuarioCalendarioVacacionesAsync(usuario.IdTecnico);
        this.datos = datosRecibidos.Where(X => TiposDias.First(y => y.Id == X.TipoDiaCalendario).Descripcion != "Laborable").ToList();
        StateHasChanged();
    }



}
