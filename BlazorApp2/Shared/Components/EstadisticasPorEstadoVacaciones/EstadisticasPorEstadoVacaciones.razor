@using BlazorApp2.Shared.Components.PeticionesPorEstado.Model


@if (this.DatosGrafico != null) {
    
<h2>Clasificación Peticiones</h2>
    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-lg-6 offset-lg-3 my-5">
                <RadzenChart ColorScheme=@colorScheme>
                    <RadzenDonutSeries Data="@DatosGrafico.ToArray()" CategoryProperty="EstadoDia" ValueProperty="TotalDias">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Peticiones </div> 
                                <div>en @this.YearSeleccionado</div>
                            </div>
                        </TitleTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
            </div>
        </div>
    </div>
}

@code {


    List<DatoGrafico> DatosGrafico;


    [Parameter]
    public ColorScheme colorScheme { get; set; }

    [Parameter]
    public int YearSeleccionado { get; set; } 

    [Parameter]
    public ICollection<CalendarioVacacionesResponse> calendarios { get; set; }

    [Parameter]
    public ICollection<TipoDiaCalendarioResponse> TiposDias { get; set; } 

    [Parameter]
    public ICollection<EstadoCalendarioVacacionesResponse> EstadosDias { get; set; }

    protected override void OnParametersSet() {
        if(this.calendarios!=null) LoadData();
    }

    public void LoadData() {
        this.DatosGrafico = new();
        this.calendarios.GroupBy(X => X.Estado).Select(X=> Tuple.Create(EstadosDias.First(Y=> Y.Id==X.Key).Descripcion,X.Count()))
        .ToList().ForEach(tupla=> 
            this.DatosGrafico.Add(new DatoGrafico() { EstadoDia=tupla.Item1, TotalDias= tupla.Item2})
        );
        
        
        StateHasChanged();
    }
    
  
           
}