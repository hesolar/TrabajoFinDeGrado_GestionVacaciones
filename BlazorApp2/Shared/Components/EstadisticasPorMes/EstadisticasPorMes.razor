@using System.Globalization


@if (serie1 != null) {
    

<h2>Distribución vacaciones Mensual</h2>
    <div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
                
                
                <RadzenChart>
                    <RadzenLineSeries Smooth="true" Data="@serie1" CategoryProperty="Nombre" Title="Dias Concedidos" LineType="LineType.Dashed" ValueProperty="Revenue">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                    </RadzenLineSeries>
                   @* <RadzenLineSeries Smooth="@smooth" Data="@serie2" CategoryProperty="Date" Title="Peticiones Canceladas" ValueProperty="Revenue">
                        <RadzenMarkers MarkerType="MarkerType.Diamond" />
                    </RadzenLineSeries>*@
                    <RadzenValueAxis >
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Total Días" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>
}
@code {
   
    DatoGrafica[] serie1;

     private string obtenerNombreMesNumero (int numeroMes){

       DateTimeFormatInfo formatoFecha = CultureInfo.CurrentCulture.DateTimeFormat;
       string nombreMes = formatoFecha.GetMonthName(numeroMes);
       return nombreMes.Substring(0,3);

     }


    protected override void OnParametersSet() {
        if (calendarios != null) LoadData();
    }
    public void LoadData() {
        List<DatoGrafica> Aprobados = new();
        var calendariosAprobados = calendarios.Where(X => this.EstadosDias.First(y=> y.Id==X.Estado).Descripcion == this.EstadoDeseado);
        calendariosAprobados.GroupBy(X => X.FechaCalendario.Month).ToList().ForEach(Y => {
            Aprobados.Add(new DatoGrafica { Date = DateTime.Parse($"{this.YearSeleccionado}-{Y.First().FechaCalendario.Month}-01"),
                                            Revenue = Y.Count() ,
                                            Nombre = obtenerNombreMesNumero(Y.First().FechaCalendario.Month)
            });
            
        });
        Enumerable.Range(1, 12).ToList().ForEach(mes => { 

            if(!Aprobados.Any(X=> X.Date.Month == mes)){
                Aprobados.Add(new DatoGrafica() { Date = DateTime.Parse($"{this.YearSeleccionado}-{mes}-01"), 
                                                  Revenue = 0 ,
                                                  Nombre= obtenerNombreMesNumero(mes)
                
                });
            }
        });
        serie1 = Aprobados.OrderBy(X=> X.Date.Month).ToArray();
        StateHasChanged();
    }

    [Parameter]
    public ColorScheme colorScheme { get; set; }

    [Parameter]
    public int YearSeleccionado { get; set; } 

    [Parameter]
    public ICollection<CalendarioVacacionesResponse> calendarios { get; set; }
    [Parameter]

    public ICollection<TipoDiaCalendarioResponse> TiposDias { get; set; } 
    [Parameter]

    public ICollection<EstadoCalendarioVacacionesResponse> EstadosDias { get; set; }

    [Parameter]
    public UsuarioResponse usuario{ get; set; }
    [Parameter]
    public string EstadoDeseado  { get; set; }

}
