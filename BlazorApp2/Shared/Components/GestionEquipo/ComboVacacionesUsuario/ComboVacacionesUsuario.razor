@page "/Gestion/GestionEquipo"
@inherits ComboVacacionesUsuarioBase
@inject API _api
@inject AuthenticationStateProvider _authenticationStateProvider


<PageTitle>Gestion Equipo</PageTitle>




<RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="Datos Por Usuario Equipo" />
<RadzenCard Class="mt-4" Style="background-color:steelblue">
    <RadzenButton Click="()=>TarjetaComboVacacionesUsuario.Visible=!TarjetaComboVacacionesUsuario.Visible"
                  Text="@(TarjetaComboVacacionesUsuario.Visible? "Ocultar" : "Mostrar")"
                  ButtonStyle="@(TarjetaComboVacacionesUsuario.Visible? ButtonStyle.Light :  ButtonStyle.Primary)" style="margin-bottom: 10px" />
    <RadzenCard Class="mt-4" @ref="TarjetaComboVacacionesUsuario" Style="border:none;background-color:white">
        @if (this.proyectosUsuario != null) {

            <div style="align-self:center"> <h4>Proyectos:</h4> </div>
            <RadzenDropDownDataGrid TValue="string" Data=@(this.proyectosUsuario.Select(X=> X.Nombre))
                                Change=OnChange Style="align-self:center; width: 25%" @ref=dropdownProyectos />


            @if (this.proyectoSeleccionado != null) {
                <RadzenCard Visible=actualizarProyecto>

                    <CalendarioPorUsuarios Proyecto=proyectoSeleccionado _api=_api />
                </RadzenCard>



            }
        }

    </RadzenCard>
</RadzenCard>



<br />


<RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="Calendario Anual Equipo" />
<br />
<br />



<RadzenCard Style="background-color:lightblue; border:none">


    <RadzenButton Click="()=>TarjetaCalendarioEquipo.Visible=!TarjetaCalendarioEquipo.Visible"
                  Text="@(TarjetaCalendarioEquipo.Visible? "Ocultar" : "Mostrar")"
                  ButtonStyle="@(TarjetaCalendarioEquipo.Visible? ButtonStyle.Light :  ButtonStyle.Secondary)" style="margin-bottom: 10px" />

    <RadzenCard Class="mt-4" @ref="TarjetaCalendarioEquipo" Style="border:none;background-color:white">
        @if(TotalUsuariosProyecto>0 && totalVacaciones!=null){
            <BlazorApp2.Shared.Components.GestionEquipo.CalendarioEquipo.CalendarioEquipo 
            totalDias=totalVacaciones TotalUsuarios=TotalUsuariosProyecto   proyectoActual=this.proyectoSeleccionado/>
        }
        
    </RadzenCard>
</RadzenCard>














@code {



    protected RadzenCard TarjetaComboVacacionesUsuario = new();
    protected RadzenCard TarjetaCalendarioEquipo = new();

    public List<ProyectoResponse> proyectosUsuario;
    RadzenDropDownDataGrid<String> dropdownProyectos;
    ProyectoResponse proyectoSeleccionado;
    int TotalUsuariosProyecto = 0;
    Dictionary<CalendarioVacacionesResponse,int> totalVacaciones= new();

    protected override async Task OnInitializedAsync() {

        UsuarioResponse currentAppUser = _authenticationStateProvider.GetCurrentUser(_api);
        IEnumerable<int> IdProyectos = await _api.GetProyectosUsuarioAsync(currentAppUser.IdTecnico);
        proyectosUsuario = new();
        foreach (var idProyecto in IdProyectos) {
            ProyectoResponse s = await _api.GetProyectoByIdAsync(idProyecto);
            proyectosUsuario.Add(s);
        }
    }
    public bool actualizarProyecto;
    async Task OnChange(Object value) {
        this.proyectoSeleccionado = this.proyectosUsuario.First(X => X.Nombre == this.dropdownProyectos.SelectedItem.ToString());
        actualizarProyecto = false;
       this.TarjetaCalendarioEquipo.Visible = false;
        StateHasChanged();
        actualizarProyecto = true;
        var totalUsuarios = await _api.GetUsuariosProyectoAsync(this.proyectoSeleccionado.IdProyecto);
        this.TotalUsuariosProyecto = totalUsuarios.Count();

        this.totalVacaciones = new();
        Action<Dictionary<CalendarioVacacionesResponse,int>,CalendarioVacacionesResponse> AddDiaCalendario =(totalDias,nuevoDia)=> {

            var dia = totalDias.FirstOrDefault(x => x.Key.FechaCalendario == nuevoDia.FechaCalendario);
            if (dia.Key!=null) {
                totalDias[dia.Key] += 1;
            }

            else {

                totalDias.Add(nuevoDia, 1);
            } 

        };
        foreach (var usuario in totalUsuarios) {
            IEnumerable<CalendarioVacacionesResponse> resultados = await _api.GetUsuarioCalendarioVacacionesAsync(usuario);

            resultados.ToList().ForEach(X => AddDiaCalendario(this.totalVacaciones, X));
        }
        
        this.TarjetaCalendarioEquipo.Visible = true;


    }

}
